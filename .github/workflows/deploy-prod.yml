name: Deploy Production (S1 & S2)

on:
  push:
    branches: [main]
  workflow_dispatch: {}

concurrency:
  group: deploy-prod
  cancel-in-progress: true

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Frontend build
        working-directory: frontend
        run: |
          npm ci
          npm run build

      - name: Backend tests (best-effort)
        working-directory: backend
        run: |
          python -m pip install -r requirements.txt || true
          pytest -q || true

      - name: Analytics tests (best-effort)
        working-directory: analytics
        run: |
          python -m pip install -r requirements.txt || true
          pytest -q || true

  deploy:
    needs: build-test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: { target: [s1, s2] }

    steps:
      - name: Set target env (${{ matrix.target }})
        run: |
          echo "HOST=${{ matrix.target == 's1' && secrets.S1_HOST || secrets.S2_HOST }}" >> $GITHUB_ENV
          echo "PORT=${{ matrix.target == 's1' && secrets.S1_PORT || secrets.S2_PORT }}" >> $GITHUB_ENV
          echo "USER=${{ matrix.target == 's1' && secrets.S1_USER || secrets.S2_USER }}" >> $GITHUB_ENV
          echo "KEY=${{ matrix.target == 's1' && secrets.S1_KEY  || secrets.S2_KEY  }}" >> $GITHUB_ENV

      - name: Validate inputs (${{ matrix.target }})
        run: |
          for v in HOST PORT USER KEY; do
            if [ -z "${!v}" ]; then
              echo "::error ::$v is empty for target ${{ matrix.target }}. Check repo Secrets."
              exit 1
            fi
          done
          echo "Using $USER@$HOST:$PORT"

      - name: Trust host key (${{ matrix.target }})
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "$PORT" "$HOST" >> ~/.ssh/known_hosts

      - name: Deploy to ${{ matrix.target }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ env.HOST }}
          port:     ${{ env.PORT }}
          username: ${{ env.USER }}
          key:      ${{ env.KEY }}
          script: |
            set -Eeuo pipefail

            if [ ! -d /opt/AnimoAssign3/.git ]; then
              mkdir -p /opt/AnimoAssign3
              cd /opt/AnimoAssign3
              git clone https://github.com/HIEB1I/AnimoAssign3.git .
            fi

            cd /opt/AnimoAssign3

            # Pull via HTTPS
            unset GIT_SSH_COMMAND || true
            git config --global url.https://github.com/.insteadof git@github.com:
            git config --global url.https://github.com/.insteadof ssh://git@github.com/
            git config --global --add safe.directory /opt/AnimoAssign3
            git remote set-url origin https://github.com/HIEB1I/AnimoAssign3.git

            git fetch --all --prune
            git checkout main
            git pull --ff-only

            # Use the server-specific compose file if you have them
            if [ "${{ matrix.target }}" = "s1" ]; then
              FILE=docker/docker-compose.prod.s1.yml
            else
              FILE=docker/docker-compose.prod.s2.yml
            fi
            [ -f "$FILE" ] || FILE=docker/docker-compose.prod.yml

            # Pick an env file for prod
            ENVF=""
            [ -f docker/prod.env ] && ENVF=docker/prod.env
            [ -z "$ENVF" ] && [ -f docker/.env ] && ENVF=docker/.env
            [ -z "$ENVF" ] && [ -f .env.prod ] && ENVF=.env.prod
            [ -z "$ENVF" ] && { echo "No prod env file found (docker/prod.env, docker/.env, or .env.prod)"; exit 1; }

            export COMPOSE_PROJECT_NAME=animo_prod
            NET="${COMPOSE_PROJECT_NAME}_default"

            # Export envs to silence substitution warnings
            set -a
            . "$ENVF"
            set +a

            # PRE-CLEAN once to absorb legacy containers with fixed names
            docker compose -f "$FILE" --env-file "$ENVF" down --remove-orphans || true
            for c in backend-primary analytics-primary frontend-primary mongo-primary nginx-primary; do
              docker rm -f "$c" 2>/dev/null || true
            done

            docker compose -f "$FILE" --env-file "$ENVF" up -d --build

            # Health checks inside the compose network
            docker run --rm --network "$NET" curlimages/curl:8.10.1 -fsS  http://backend-primary:8000/health
            docker run --rm --network "$NET" curlimages/curl:8.10.1 -fsS  http://analytics-primary:8000/health
            docker run --rm --network "$NET" curlimages/curl:8.10.1 -fsSI http://frontend-primary

            docker system prune -f
