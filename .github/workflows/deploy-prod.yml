name: Deploy Production (S1 & S2)

on:
  push:
    branches: [main]
  workflow_dispatch: {}

concurrency:
  group: deploy-prod
  cancel-in-progress: true

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Frontend build
        working-directory: frontend
        run: |
          npm ci
          npm run build

      - name: Backend tests (best-effort)
        working-directory: backend
        run: |
          python -m pip install -r requirements.txt || true
          pytest -q || true

      - name: Analytics tests (best-effort)
        working-directory: analytics
        run: |
          python -m pip install -r requirements.txt || true
          pytest -q || true

  deploy:
    needs: build-test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [s1, s2]   # matrix stays static

    # Map repo VARIABLES/SECRETS per target into env for easier reuse/validation
    env:
      HOST:     ${{ matrix.target == 's1' && vars.S1_HOST || vars.S2_HOST }}
      PORT:     ${{ matrix.target == 's1' && vars.S1_PORT || vars.S2_PORT }}
      USER:     ${{ matrix.target == 's1' && vars.S1_USER || vars.S2_USER }}
      SSH_KEY:  ${{ matrix.target == 's1' && secrets.S1_KEY || secrets.S2_KEY }}

    steps:
      - name: Validate inputs (${{ matrix.target }})
        run: |
          for v in HOST PORT USER SSH_KEY; do
            if [ -z "${!v}" ]; then
              echo "::error ::$v is empty for target ${{ matrix.target }}. Check repo Variables/Secrets."
              exit 1
            fi
          done
          echo "Using HOST=$HOST PORT=$PORT USER=$USER for target ${{ matrix.target }}"

      - name: Trust host key (${{ matrix.target }})
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "$PORT" "$HOST" >> ~/.ssh/known_hosts

      - name: Deploy to ${{ matrix.target }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ env.HOST }}
          port:     ${{ env.PORT }}
          username: ${{ env.USER }}
          key:      ${{ env.SSH_KEY }}
          script: |
            set -Eeuo pipefail

            if [ ! -d /opt/AnimoAssign3/.git ]; then
              mkdir -p /opt/AnimoAssign3
              cd /opt/AnimoAssign3
              git clone https://github.com/HIEB1I/AnimoAssign3.git .
            fi

            cd /opt/AnimoAssign3
            git fetch --all --prune
            git checkout main
            git pull --ff-only

            # Resolve compose + env file from repo
            FILE=""
            [ -f docker/compose.prod.yml ] && FILE=docker/compose.prod.yml
            [ -z "$FILE" ] && [ -f docker/docker-compose.prod.yml ] && FILE=docker/docker-compose.prod.yml
            [ -z "$FILE" ] && [ -f docker/compose.yml ] && FILE=docker/compose.yml
            [ -z "$FILE" ] && [ -f docker/docker-compose.yml ] && FILE=docker/docker-compose.yml
            [ -z "$FILE" ] && [ -f docker-compose.yml ] && FILE=docker-compose.yml
            [ -z "$FILE" ] && { echo "No compose file found"; exit 1; }

            ENVF=""
            [ -f docker/.env.prod ] && ENVF=docker/.env.prod
            [ -z "$ENVF" ] && [ -f .env.prod ] && ENVF=.env.prod
            [ -z "$ENVF" ] && { echo "Missing prod env file (docker/.env.prod or .env.prod)"; exit 1; }

            export COMPOSE_PROJECT_NAME=animo_prod
            docker compose -f "$FILE" --env-file "$ENVF" up -d --build

            # Smoke checks (adjust if your ports differ)
            curl -fsS  http://127.0.0.1:18000/health || (docker compose -f "$FILE" logs backend && exit 1)
            curl -fsS  http://127.0.0.1:19000/health || (docker compose -f "$FILE" logs analytics && exit 1)
            curl -fsSI http://127.0.0.1:8080         || (docker compose -f "$FILE" logs frontend && exit 1)

            docker system prune -f
